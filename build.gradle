plugins {
    id 'java'
    id 'io.freefair.lombok' version "8.10"
    id "io.qameta.allure" version "2.12.0"
    id 'org.gradle.test-retry' version '1.5.3'
}

group = 'org.lakeenko'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'

allure {
    report {
        version.set("2.24.0")
    }

    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.24.0")
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies  {
    testImplementation 'com.codeborne:selenide:7.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'io.qameta.allure:allure-junit5:2.25.0'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0'
    testImplementation 'org.aeonbits.owner:owner:1.0.4'
//    implementation 'io.github.bonigarcia:webdrivermanager:6.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.13.1'
    testImplementation 'io.opentelemetry:opentelemetry-semconv:1.30.1-alpha'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'io.qameta.allure:allure-selenide:2.24.0'

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    retry {
        failOnPassedAfterRetry = false
        maxRetries = 3
    }
}
tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    systemProperties += [
            'junit.jupiter.execution.parallel.enabled'                 : System.getProperty("parallelRun"),
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads", "1").toInteger()
    ]
}
task cart_tests(type: Test) {
    useJUnitPlatform {
        includeTags "Cart"
    }
}

task filter_tests(type: Test) {
    useJUnitPlatform {
        includeTags "Filter"
    }
}

task main_tests(type: Test) {
    useJUnitPlatform {
        includeTags "Main"
    }
}

task product_cart_tests(type: Test) {
    useJUnitPlatform {
        includeTags "ProductCart"
    }
}

task search_tests(type: Test) {
    useJUnitPlatform {
        includeTags "Search"
    }
}