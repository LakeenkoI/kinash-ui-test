plugins {
    id 'java'
    id 'io.freefair.lombok' version "8.10"
    id "io.qameta.allure" version "2.12.0"
    id 'org.gradle.test-retry' version '1.6.2'
}

group = 'com.lakeenko'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

def versions = [
        selenide: '7.9.3',
        junitBom: '5.13.3',
        allure  : '2.27.0',
        owner   : '1.0.4',
        assertj : '3.27.3',
]

allure {
    report {
        version.set(versions.allure)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(versions.allure)
            }
        }
    }
}

dependencies {
    implementation(
            "com.codeborne:selenide:${versions.selenide}",
            "org.aeonbits.owner:owner:${versions.owner}",
            "org.assertj:assertj-core:${versions.assertj}",
            "io.qameta.allure:allure-selenide:${versions.allure}",
            platform("org.junit:junit-bom:${versions.junitBom}"),
            "org.junit.jupiter:junit-jupiter")
    testImplementation(
            "io.qameta.allure:allure-junit5:${versions.allure}")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    retry {
        failOnPassedAfterRetry = false
        maxRetries = 1
    }

    if (Boolean.parseBoolean(System.getProperty('parallelRun', 'false'))) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : 'true',
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads", "2").toInteger()
        ]
    }
}

def testTags = [
        "Smoke",
        "Regression",
        "Cart",
        "Filter",
        "Main",
        "ProductCart",
        "Search"
]

static String toSnakeCase(String input) {
    input.replaceAll(/([a-z])([A-Z])/, '$1_$2').toLowerCase()
}

testTags.each { tag ->
    def taskName = "${toSnakeCase(tag)}_tests"
    tasks.register(taskName, Test) {
        useJUnitPlatform {
            includeTags tag
        }
        group = "verification"
        description = "Run tests with @Tag('$tag')"
    }
}
