package com.lakeenko.listeners;

import com.codeborne.selenide.ex.ElementNotFound;
import com.codeborne.selenide.logevents.LogEvent;
import com.codeborne.selenide.logevents.LogEventListener;
import com.lakeenko.exceptions.CustomElementNotFoundException;
import io.qameta.allure.Allure;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
public class CustomSelenideListener implements LogEventListener {

    private final Map<LogEvent, Long> timers = new ConcurrentHashMap<>();

    @Override
    public void beforeEvent(LogEvent event) {
        // ‚è±Ô∏è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
        timers.put(event, System.nanoTime());

        // üü¶ –ª–æ–≥ –≤ Allure
        Allure.step("üîπ " + event.getSubject() + " ‚Üí " + event.getElement());

        // ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π xpath
        if (event.getElement().toLowerCase().contains("xpath") &&
                event.getElement().contains("[")) {
            System.out.println("‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–∫–∞—Ç–æ—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º: " + event.getElement());
        }
    }

    @Override
    public void afterEvent(LogEvent event) {
        Throwable error = event.getError();
        if (error instanceof ElementNotFound) {
            String action = event.getSubject();
            String locator = event.getElement();
            String message = error.getMessage().split("\\r?\\n")[0];

            throw new CustomElementNotFoundException(action, locator, message);
        }
    }
}